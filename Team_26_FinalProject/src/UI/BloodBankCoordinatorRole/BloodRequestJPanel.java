/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.BloodBankCoordinatorRole;

import Business.DIG.PersonBloodType;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Magic.Design.*;
import Business.Organization.Organization;
import Business.Organization.Blood_Bank_Organization;
import Business.Organization.SystemCoordinatorOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Magic.Design.MyJLabel;
import Magic.Design.MyJButton;
import Magic.Design.MyTableFormat;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author anchitha
 */
public class BloodRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BloodRequestJPanel
     */
    private UserAccount userAccount;
    private Blood_Bank_Organization bloodorganization;
    private Enterprise enterprise;
    private Network network;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    private EcoSystem system;
    
    public BloodRequestJPanel(UserAccount userAccount, Blood_Bank_Organization bloodBankOrganization, Enterprise enterprise, Network network, EcoSystem system) {
        initComponents();
        this.userAccount = userAccount;
        this.bloodorganization = bloodBankOrganization;
        this.enterprise = enterprise;
        this.network = network;
        this.system = system;
         
        tblLiverCoordinator.getTableHeader().setDefaultRenderer(new MyTableFormat());
        tblDigAvailability.getTableHeader().setDefaultRenderer(new MyTableFormat());
        
        
        populateLiverCoordinatorTable();
        populateDigAvailabilityTable();
    }

   
    public void populateLiverCoordinatorTable(){
        DefaultTableModel model = (DefaultTableModel)tblLiverCoordinator.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getPatient();
            row[2] = request.getPatient().getName();
            row[3] = request.getPatient().getEmailID();
            row[4] = String.join(", ",request.getPatient().getDIG().getDigValuesList());
            row[5] = request.getStatus();
             
            model.addRow(row);
        }
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnApprove = new javax.swing.JButton();
        btnOnHold = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblLiverCoordinator = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDigAvailability = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 221, 228));
        setForeground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1150, 720));
        setPreferredSize(new java.awt.Dimension(1150, 830));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("List of Blood Transfusion Requests");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 300, -1, -1));
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(376, 247, -1, -1));

        btnApprove.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnApprove.setText("Approve Request");
        btnApprove.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });
        add(btnApprove, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 530, 210, 40));

        btnOnHold.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnOnHold.setText("Hold Request");
        btnOnHold.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnOnHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnHoldActionPerformed(evt);
            }
        });
        add(btnOnHold, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 530, 190, 40));

        tblLiverCoordinator.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblLiverCoordinator.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Number", "Patient ID", "Patient Name", "Email ID", "BloodType", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLiverCoordinator.setGridColor(new java.awt.Color(0, 0, 0));
        tblLiverCoordinator.setRowHeight(30);
        tblLiverCoordinator.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLiverCoordinatorMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblLiverCoordinator);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, 890, 170));

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));
        jPanel3.setPreferredSize(new java.awt.Dimension(926, 70));
        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jLabel25.setBackground(new java.awt.Color(255, 255, 204));
        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(51, 51, 51));
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Blood Bank");
        jPanel3.add(jLabel25);

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1570, -1));

        tblDigAvailability.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblDigAvailability.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blood Type", "Count"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDigAvailability.setRowHeight(30);
        jScrollPane1.setViewportView(tblDigAvailability);
        if (tblDigAvailability.getColumnModel().getColumnCount() > 0) {
            tblDigAvailability.getColumnModel().getColumn(1).setPreferredWidth(30);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 900, 170));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Blood Bank Inventory");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 80, 330, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblLiverCoordinator.getSelectedRow();
        
        if (selectedRow < 0){
            //JOptionPane.showMessageDialog(null, "Please select a row first!" );
            JOptionPane.showMessageDialog(null, new JLabel(  "<html><b>Please select a row from the table</b></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
            
            return;
        }
        else{
            WorkRequest request = (WorkRequest)tblLiverCoordinator.getValueAt(selectedRow, 0);
            if(request.getStatus().equals("Insurance Approved. Passing to BloodBank")
                || request.getStatus().equals("On Hold Due to Blood unavailability")){
                
                dB4OUtil.storeSystem(system);
                populateLiverCoordinatorTable();
        
                Enterprise ent = null;
                Organization org = null;
        
                for (Enterprise enterprise : network.getEnterprise_Directory().getEnterpriseList()) {
                    if (enterprise.getEnterpriseType().toString().equals("Hospital")) {
                            ent = enterprise;
                            break;
                    }
                }
                
                if(ent == null) {
                    JOptionPane.showMessageDialog(null, 
                            new JLabel(  "<html><b>There is no Hospital Enterprise.<br> Cannot proceed..</b></html>")
                            , "Error", JOptionPane.ERROR_MESSAGE);
                }
                
                for (Organization organization : ent.getOrganizationDirectory().getOrganizationList()) {
                    if(organization instanceof SystemCoordinatorOrganization) {
                        org = organization;
                        break;
                    }
                }
        
                if (org != null) {
                    request.setStatus("BloodBank Approved. Passing to System Coordinator");
                    org.getWorkQueue().getWorkRequestList().add(request);
                }
                else {
                    JOptionPane.showMessageDialog(null, "No organization present", "Error", JOptionPane.ERROR_MESSAGE);
                }
              
                JOptionPane.showMessageDialog(null, "BloodBank Approved. Passing to System Coordinator");
                populateLiverCoordinatorTable(); 
            }
            else{
                 JOptionPane.showMessageDialog(null, new JLabel("<html><b>Work Request is already in progress!</b></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
                
            }
        }
            
     dB4OUtil.storeSystem(system);
        
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnOnHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnHoldActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblLiverCoordinator.getSelectedRow();
        
        if (selectedRow < 0){
            //JOptionPane.showMessageDialog(null, "Please select a row first!" );
            
            JOptionPane.showMessageDialog(null, new JLabel(  "<html><b>Please select a row from the table!</b></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
            
            
            return;
        }
        else{
            WorkRequest request = (WorkRequest)tblLiverCoordinator.getValueAt(selectedRow, 0);
            if(request.getStatus().equals("Insurance Approved. Passing to BloodBank")){
                request.setStatus("On Hold Due to Blood unavailability");
                
                dB4OUtil.storeSystem(system);
                populateLiverCoordinatorTable();   
            }
            else{
              JOptionPane.showMessageDialog(null, new JLabel("<html><b>Work Request is already in progress!</b></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
                
              //  JOptionPane.showMessageDialog(null, "Work Request is already in progress!" ); 
            }
        }
        
    }//GEN-LAST:event_btnOnHoldActionPerformed

    private void tblLiverCoordinatorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLiverCoordinatorMouseClicked
        // TODO add your handling code here:
        
        int selectedRow = tblLiverCoordinator.getSelectedRow();
       // jPanel1.setVisible(true);
        if (selectedRow < 0){   
            //JOptionPane.showMessageDialog(null, new JLabel(  "<html><b>Please select a row from the table!</b></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
             return;
        }
         else{
            WorkRequest request = (WorkRequest)tblLiverCoordinator.getValueAt(selectedRow, 0);
            if(request.getStatus().equals("Insurance Approved. Passing to BloodBank")){
                //request.setStatus("On Hold Due to BoneMarrow unavailability");
                if(request.getPatient().isEmergencyStatus() == true){
                    JOptionPane.showMessageDialog(null, new JLabel("Insurance Approved. Passing to BloodBank"), "Warning", JOptionPane.WARNING_MESSAGE);
                }
                //dB4OUtil.storeSystem(system);
                //populateBoneMarrowCoordinatorTable();   
            }
            else{
              //JOptionPane.showMessageDialog(null, new JLabel("<html><b>Work Request is already in progress!</b></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
//                 jPanel1.setVisible(false);
              //  JOptionPane.showMessageDialog(null, "Work Request is already in progress!" ); 
            }
        }
        
        
        
    }//GEN-LAST:event_tblLiverCoordinatorMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnOnHold;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDigAvailability;
    private javax.swing.JTable tblLiverCoordinator;
    // End of variables declaration//GEN-END:variables

    private void populateDigAvailabilityTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblDigAvailability.getModel();
        dtm.setRowCount(0);

        for(Map.Entry<String, Integer> digCount : bloodorganization.getInventoryData().entrySet()) {
            
            Object row[] = new Object[2];
            row[0]= digCount.getKey().toString();
            row[1]= digCount.getValue();
              
            dtm.addRow(row);
            
        }
    }
}
